var connection;
var edit = false;

var time = 0;
var time2 = 0;

var upinterval;
var downinterval;
var moveinterval;

var cursorY;
var start_y;

var offset = 0;

function connect() {
	connection = new WebSocket('ws://' + window.location.hostname + '/autocue', ['soap', 'xmpp']);
	connection.binaryType = "arraybuffer";
	connection.onopen = onWSOpen;
	connection.onerror = onWSError;
	connection.onclose = onWSClose;
	connection.onmessage = onWSMessage;
}
connect();

function onWSOpen() {
	
};

function onWSError(error) {
	console.log('WebSocket Error ' + error);
};

function onWSClose() {
	connect();
}

function onWSMessage(e) {
	var arr = new Uint8Array(e.data);
	var str = "";

	for (var i = 1; i < arr.length; i++) {
		str += String.fromCharCode(arr[i]);
	}

	packetType = parseInt(String.fromCharCode(arr[0]));
	switch (packetType) {
		case 1:
			// New text information
			document.getElementById('edit_txt').value = str;
			document.getElementById('content').innerHTML = str
					.replace(/'''''([a-zA-Z0-9_ \n]*)'''''/g, "<b><i>$1</i></b>")
					.replace(/'''([a-zA-Z0-9_ \n]*)'''/g, "<b>$1</b>")
					.replace(/''([a-zA-Z0-9_ \n]*)''/g, "<i>$1</i>")
					.replace(/\n/g, "<br />");
			break;
		case 2:
			// New size information
			document.getElementById('content').style.fontSize = str + "px";
			document.getElementById('content').style.lineHeight = Math.ceil(parseInt(str) * 1.1) + "px";
			break;
		case 3:
			// New position information
			offset = -str;
			if (time2 < new Date().getTime()) {
				window.scrollTo(0, -str);
				time = new Date().getTime() + 1000;
			}
			break;
	}
};

function sendPacket(a, b) {
	var bytearray = new Uint8Array(2);
	bytearray[0] = a;
	bytearray[1] = b;
	connection.send(bytearray.buffer);
}

function sendString(a, str) {
	var bufView = new Uint8Array(str.length + 1);
	bufView[0] = a;
	for (var i = 1, strLen = str.length; i <= strLen; i++) {
		bufView[i] = str.charCodeAt(i - 1);
	}
	connection.send(bufView.buffer);
}

document.onkeypress = function (e) {
	e = e || window.event;
	
	if (e.keyCode == 96) {
		if (edit) {
			sendString(4, document.getElementById('edit_txt').value);
		}

		edit = !edit;
		document.getElementById('edit').className = edit ? "show" : "";
	}
	if (!edit) {
		if (e.keyCode == 114) { // "r"
			$("body").toggleClass("rtl");
		} else if (e.keyCode == 61) { // "+"
			sendPacket(3, 1);
		} else if (e.keyCode == 45) { // "-"
			sendPacket(3, 2);
		}
	}
};

// Track move commands
document.onkeydown = function (e) {
	e = e || window.event;
	
	if (e.keyCode == 38) { // Up Arrow
		if (!upinterval) {
			upinterval = setInterval("sendString(5, '1')", 5);		
		}
	} else if (e.keyCode == 40) { // Down Arrow
		if (!downinterval) {
			downinterval = setInterval("sendString(5, '-1')", 5);
		}
	} else if (e.keyCode == 16 && !edit && !start_y) { // Shift
		start_y = cursorY;
		moveinterval = setInterval("mouse_move()", 17)
	}
};

// Track end of move commands
document.onkeyup = function (e) {
	e = e || window.event;

	if (e.keyCode == 38) { // Up Arrow
		clearInterval(upinterval);
		upinterval = null;
	} else if (e.keyCode == 40) { // Down Arrow
		clearInterval(downinterval);
		downinterval = null;
	} else if (e.keyCode == 16 && !edit && start_y) { // Shift
		clearInterval(moveinterval);
		moveinterval = null;
		start_y = null;
	}
};


// Send move commands generated by the mouse
function mouse_move() {
	move = Math.floor((start_y - cursorY)/100)
	console.log("Starts at " + start_y + "and current at" + cursorY + "with offset of" + offset)
	sendString(5, String(move));
}


// Keep track of where the mouse is on the screen, not page.
document.onmousemove = function(e){
    cursorY = e.pageY - offset;
}
